// Code generated by GoRec.  DO NOT EDIT.

package main

import (
	"errors"
	"database/sql"
	"github.com/google/uuid"
	"fmt"
)

type PersonRecord struct {
	InternalIsSaved bool 
	RawId string
	RawName string
	RawDescription string
}

func (rec *PersonRecord) IsSaved() bool {
	return rec.InternalIsSaved
}

func (rec *PersonRecord) Id() string {
	return rec.RawId
}

func (rec *PersonRecord) SetId(val string) {
	rec.RawId = val
}

func (rec *PersonRecord) Name() string {
	return rec.RawName
}

func (rec *PersonRecord) SetName(val string) {
	rec.RawName = val
}

func (rec *PersonRecord) Description() string {
	return rec.RawDescription
}

func (rec *PersonRecord) SetDescription(val string) {
	rec.RawDescription = val
}

func (rec *PersonRecord) AutogenerateId() {
	rec.RawId = uuid.New().String()
}

func PersonQuery(whereClause string, args ...interface{}) ([]*Person, error) {
	rows, err := PersonRecordSharedConnection.Query("SELECT id, name, description FROM people " + whereClause, args)
	results := []*Person{}
	if err != nil {
		return results, err
	}
	defer rows.Close()

	for rows.Next() {
		p := Person{
			PersonRecord {
				InternalIsSaved: true,
			},
		}
		err = rows.Scan(&p.RawId, &p.RawName, &p.RawDescription)
		if err != nil {
			return results, err
		}

		p.Setup()

		results = append(results, &p)
	}

	return results, nil
}

func (rec *PersonRecord) InternalIdIsPresent() bool {
	return len(rec.RawId) > 0
}

// This allows you to suppress this function and override it with your own
func (rec *Person) Save() error {
	return rec.InternalSave()
}

func (rec *Person) InternalSave() error {
	conn := PersonRecordSharedConnection
	if rec.InternalIsSaved {
		fmt.Println("UPDATE")
		_, err := conn.Exec("UPDATE people SET name = $1, description = $2 where id = $3", rec.RawName, rec.RawDescription, rec.RawId)
		return err
	} else {
		if !rec.InternalIdIsPresent() {
			rec.AutogenerateId()
		}
		fmt.Println("INSERT")
		_, err := conn.Exec("INSERT INTO people (id, name, description) VALUES ($1, $2, $3)", rec.RawId, rec.RawName, rec.RawDescription)
		if err != nil {
			return err
		}
		rec.InternalIsSaved = true
		return nil
	}
}

func (p *Person) Setup() {
	// nothing
}

func FindPerson(id string) (*Person, error) {
	rows, err := PersonRecordSharedConnection.Query("SELECT id, name, description FROM people WHERE id = $1", id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	p := Person{
		PersonRecord{
			InternalIsSaved: true,
		},
	}

	if rows.Next() {
		rows.Scan(&p.RawId, &p.RawName, &p.RawDescription)
		return &p, nil
	} else {
		return nil, errors.New("No record")
	}

	p.Setup()

	return &p, nil
}

var PersonRecordSharedConnection *sql.DB

